
import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {:

    int curr_lineno() {
		return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
		return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

:}

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
	    int lineno = action_obj.curr_lineno();
		String filename = action_obj.curr_filename().getString();
	    System.err.print("\"" + filename + "\", line " + lineno +
			": parse error at or near ");
	    Utilities.printToken(cur_token);
		omerrs++;
		if (omerrs>50) {
		   System.err.println("More than 50 errors");
		   System.exit(1);
		}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

// SYMBOL LISTS ///////////////////////////////////////////////////////////////
// Ref.: <http://www2.cs.tum.edu/projects/cup/docs.php#symbol_list>

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Expressions expr_list;
nonterminal Expressions expr_block;
nonterminal Expression expr;
nonterminal Cases case_list;
nonterminal branch case_branch;
nonterminal attr attribute;
nonterminal let let_remainder;

// PRECEDENCE AND ASSOCIATIVITY DECLARATIONS //////////////////////////////////
// Ref.: <http://www2.cs.tum.edu/projects/cup/docs.php#precedence>

/*
 *	All binary operations are left-associative, with the exception of
 *	assignment, which is right-associative, and the three comparison
 *	operations, which do not associate. (Ref.Manual#11.1)
 */

precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

// THE GRAMMAR ////////////////////////////////////////////////////////////////
// Ref.: <http://www2.cs.tum.edu/projects/cup/docs.php#production_list>
// Definición de constructores: 'cool-tree.aps'

program ::=
	// [[class; ]] +
	class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
    ;

class_list ::=
	// (una única clase)
	class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	// (varias clases)
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

class ::=
	// class TYPE { [[feature; ]] ∗ };
	// (si no se especifica una superclase, la clase hereda de la clase Object)
	CLASS TYPEID:n LBRACE feature_list:fl RBRACE SEMI
		{: RESULT = new class_c(curr_lineno(), n,
			AbstractTable.idtable.addString("Object"), fl, curr_filename()); :}
   	// class TYPE inherits TYPE { [[feature; ]] ∗ };
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:fl RBRACE SEMI
		{: RESULT = new class_c(curr_lineno(), n, p, fl, curr_filename()); :}
	| CLASS TYPEID error SEMI
	| CLASS TYPEID INHERITS TYPEID error SEMI
	| error
	;

feature_list ::=
	// (la lista puede estar vacía, pero no puede contener elementos vacíos)
		{: RESULT = new Features(curr_lineno()); :}
	| feature_list:fl feature:f
		{: RESULT = fl.appendElement(f); :}
	;

feature ::=
	// ID() : TYPE { expr };
	OBJECTID:oid LPAREN RPAREN COLON TYPEID:tid LBRACE expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), oid, new Formals(curr_lineno()),
			tid, e); :}
	// ID( formal [[, formal]] * ) : TYPE { expr };
	| OBJECTID:oid LPAREN formal_list:fl RPAREN COLON TYPEID:tid LBRACE
		expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), oid, fl, tid, e); :}
	| attribute:a
		{: RESULT = a; :}
	| error SEMI
	;

attribute ::=
	OBJECTID:oid COLON TYPEID:tid SEMI
		{: RESULT = new attr(curr_lineno(), oid, tid,
			new no_expr(curr_lineno())); :}
	| OBJECTID:oid COLON TYPEID:tid ASSIGN expr:e SEMI
		{: RESULT = new attr(curr_lineno(), oid, tid,
			new no_expr(curr_lineno())); :}
	| error SEMI
	;

formal_list ::=
	formal:f
		{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	| formal_list:fl COMMA formal:f
		{: RESULT = fl.appendElement(f); :}
	;

formal ::=
	OBJECTID:oid COLON TYPEID:tid
		{: RESULT = new formalc(curr_lineno(), oid, tid); :}
	;

let_remainder ::=
	OBJECTID:oid COLON TYPEID:tid IN expr:e
		{: RESULT = new let(curr_lineno(), oid, tid,
			new no_expr(curr_lineno()), e); :}
	| OBJECTID:oid COLON TYPEID:tid ASSIGN expr:e1 IN expr:e2
		{: RESULT = new let(curr_lineno(), oid, tid, e1, e2); :}
	| OBJECTID:oid COLON TYPEID:tid COMMA let_remainder:lr
		{: RESULT = new let(curr_lineno(), oid, tid,
			new no_expr(curr_lineno()), lr); :}
	| OBJECTID:oid COLON TYPEID:tid ASSIGN expr:e COMMA let_remainder:lr
		{: RESULT = new let(curr_lineno(), oid, tid, e, lr); :}
	// Error result for Let
	| error COMMA let_remainder
	;

case_list ::=
	case_branch:cb
		{: RESULT = (new Cases(curr_lineno())).appendElement(cb); :}
	| case_list:cl case_branch:cb
		{: RESULT = cl.appendElement(cb); :}
	;

case_branch ::=
	OBJECTID:oid COLON TYPEID:tid DARROW expr:e SEMI
		{: RESULT = new branch(curr_lineno(), oid, tid, e); :}
	;

expr_list ::=
	// (lista vacía)
		{: RESULT = new Expressions(curr_lineno()); :}
	| expr:e
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| expr_list:el COMMA expr:e
		{: RESULT = el.appendElement(e); :}
	;

expr_block ::=
	expr:e SEMI
		{: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| expr_block:eb expr:e SEMI
		{: RESULT = eb.appendElement(e); :}
	| error SEMI
	;

expr ::=
	// ID <- expr
	OBJECTID:oid ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(), oid, e); :}
	| OBJECTID ASSIGN error
	// expr@TYPE.ID( [ expr [[, expr]] ∗ ] )
	| expr:e AT TYPEID:tid DOT OBJECTID:oid LPAREN expr_list:el RPAREN
		{: RESULT = new static_dispatch(curr_lineno(), e, tid, oid, el); :}
	// expr.ID( [ expr [[, expr]] ∗ ] )
	| expr:e DOT OBJECTID:oid LPAREN expr_list:el RPAREN
		{: RESULT = new dispatch(curr_lineno(), e, oid, el); :}
	// ID( [ expr [[, expr]] ∗ ] )
	| OBJECTID:oid LPAREN expr_list:el RPAREN
		{: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(),
			AbstractTable.idtable.addString("self")), oid, el); :}
	// if expr then expr else expr fi
	| IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
		{: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
	// while expr loop expr pool
	| WHILE expr:e1 LOOP expr:e2 POOL
		{: RESULT = new loop(curr_lineno(), e1, e2); :}
	// { [[expr; ]] + }
	| LBRACE expr_block:eb RBRACE
		{: RESULT = new block(curr_lineno(), eb); :}
	| LET let_remainder:lr
		{: RESULT = lr; :}
	// case expr of [[ID : TYPE => expr; ]] + esac
	| CASE expr:e OF case_list:cl ESAC
		{: RESULT = new typcase(curr_lineno(), e, cl); :}
	// new TYPE
	| NEW TYPEID:tid
		{: RESULT = new new_(curr_lineno(), tid); :}
	// isvoid expr
	| ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(), e); :}
	// expr + expr
	| expr:e1 PLUS expr:e2
		{: RESULT = new plus(curr_lineno(), e1, e2); :}
	// expr - expr
	| expr:e1 MINUS expr:e2
		{: RESULT = new sub(curr_lineno(), e1, e2); :}
	// expr * expr
	| expr:e1 MULT expr:e2
		{: RESULT = new mul(curr_lineno(), e1, e2); :}
	// expr / expr
	| expr:e1 DIV expr:e2
		{: RESULT = new divide(curr_lineno(), e1, e2); :}
	// ~expr
	| NEG expr:e
		{: RESULT = new neg(curr_lineno(), e); :}
	// expr < expr
	| expr:e1 LT expr:e2
		{: RESULT = new lt(curr_lineno(), e1, e2); :}
	// expr <= expr
	| expr:e1 LE expr:e2
		{: RESULT = new leq(curr_lineno(), e1, e2); :}
	// expr = expr
	| expr:e1 EQ expr:e2
		{: RESULT = new eq(curr_lineno(), e1, e2); :}
	// not expr
	| NOT expr:e
		{: RESULT = new comp(curr_lineno(), e); :}
	// (expr)
	| LPAREN expr:e RPAREN
		{: RESULT = e; :}
	// ID
	| OBJECTID:oid
		{: RESULT = new object(curr_lineno(), oid); :}
	// integer
	| INT_CONST:i
		{: RESULT = new int_const(curr_lineno(), i); :}
	// string
	| STR_CONST:s
		{: RESULT = new string_const(curr_lineno(), s); :}
	// true/false
	| BOOL_CONST:b
		{: RESULT = new bool_const(curr_lineno(), b); :}
	;
